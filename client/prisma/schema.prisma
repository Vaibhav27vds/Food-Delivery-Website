generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  clerkId         Int?          @unique
  name            String
  email           String        @unique
  password        String?
  contact         String        // Changed from Int to String for phone numbers with country codes
  role            UserRole      @default(user)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  addresses       Address[]
  orders          Order[]
  reviews         Review[]
  cart            CartItem[]
  favoriteRestaurants Restaurant[] @relation("UserFavoriteRestaurants")
  deliveryPartner DeliveryPartner?
}

enum UserRole {
  user
  RESTAURANT_OWNER
  DELIVERY_PARTNER
  ADMIN
}

model Address {
  id          Int       @id @default(autoincrement())
  userId      Int
  houseNo     String    // Changed from Int to String for alphanumeric house numbers
  streetName  String
  area        String
  city        String
  pinCode     String    // Changed from Int to String for postal codes that might have letters
  state       String
  country     String
  longitude   Float     // Changed from Int to Float for precise coordinates
  latitude    Float     // Changed from Int to Float for precise coordinates
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  restaurant  Restaurant?  // Added this relation field
}

model Restaurant {
  id                Int           @id @default(autoincrement())
  name              String
  description       String?
  logo              String?       // URL to the restaurant logo
  coverImage        String?       // URL to the restaurant cover image
  contactNumber     String
  email             String        @unique
  openingTime       DateTime
  closingTime       DateTime
  isActive          Boolean       @default(true)
  avgRating         Float         @default(0)
  totalRatings      Int           @default(0)
  priceRange        PriceRange    @default(MEDIUM)
  deliveryFee       Float         @default(0)
  minOrderAmount    Float         @default(0)
  estimatedDeliveryTime Int?      // In minutes
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  addressId         Int           @unique
  address           Address       @relation(fields: [addressId], references: [id])
  
  categories        CategoryRestaurant[]
  products          Product[]
  orders            Order[]
  reviews           Review[]
  favoriteByUsers   User[]        @relation("UserFavoriteRestaurants")
}

enum PriceRange {
  LOW
  MEDIUM
  HIGH
  PREMIUM
}

model Category {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  description String?
  image       String?
  restaurants CategoryRestaurant[]
  products    Product[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model CategoryRestaurant {
  restaurantId Int
  categoryId   Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([restaurantId, categoryId])
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  image         String?
  price         Float         // Changed from Int to Float for precise pricing
  discountPrice Float?        // Optional discount price
  discountPercentage Int?     // Optional discount percentage
  isVegetarian   Boolean      @default(false)
  isVegan        Boolean      @default(false)
  isGlutenFree   Boolean      @default(false)
  spicyLevel     SpicyLevel   @default(MEDIUM)
  availability   Boolean      @default(true)
  preparationTime Int?        // In minutes
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  restaurantId   Int
  restaurant     Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  categoryId     Int
  category       Category     @relation(fields: [categoryId], references: [id])
  
  orderItems     OrderItem[]
  cartItems      CartItem[]
  customizations ProductCustomization[]
}

enum SpicyLevel {
  MILD
  MEDIUM
  HOT
  EXTRA_HOT
}

model ProductCustomization {
  id            Int      @id @default(autoincrement())
  name          String
  options       CustomizationOption[]
  productId     Int
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CustomizationOption {
  id                    Int      @id @default(autoincrement())
  name                  String
  additionalPrice       Float    @default(0)
  productCustomizationId Int
  productCustomization   ProductCustomization @relation(fields: [productCustomizationId], references: [id], onDelete: Cascade)
  orderItemCustomizations OrderItemCustomization[]
  cartItemCustomizations CartItemCustomization[]
}

model Order {
  id                Int           @id @default(autoincrement())
  orderNumber       String        @unique
  userId            Int
  restaurantId      Int
  addressId         Int
  status            OrderStatus   @default(PENDING)
  deliveryPartnerId Int?
  subTotal          Float
  deliveryFee       Float
  taxAmount         Float
  totalAmount       Float
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  specialInstructions String?
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  user              User          @relation(fields: [userId], references: [id])
  restaurant        Restaurant    @relation(fields: [restaurantId], references: [id])
  address           Address       @relation(fields: [addressId], references: [id])
  deliveryPartner   DeliveryPartner? @relation(fields: [deliveryPartnerId], references: [id])
  
  items             OrderItem[]
  statusUpdates     OrderStatusUpdate[]
  review            Review?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id              Int          @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  specialInstructions String?
  
  order           Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product      @relation(fields: [productId], references: [id])
  customizations  OrderItemCustomization[]
}

model OrderItemCustomization {
  id                    Int                @id @default(autoincrement())
  orderItemId           Int
  customizationOptionId Int
  
  orderItem             OrderItem          @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  customizationOption   CustomizationOption @relation(fields: [customizationOptionId], references: [id])
}

model OrderStatusUpdate {
  id          Int         @id @default(autoincrement())
  orderId     Int
  status      OrderStatus
  message     String?
  createdAt   DateTime    @default(now())
  
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model CartItem {
  id              Int          @id @default(autoincrement())
  userId          Int
  productId       Int
  quantity        Int
  addedAt         DateTime     @default(now())
  
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  product         Product      @relation(fields: [productId], references: [id])
  customizations  CartItemCustomization[]
}

model CartItemCustomization {
  id                    Int                @id @default(autoincrement())
  cartItemId            Int
  customizationOptionId Int
  
  cartItem              CartItem           @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  customizationOption   CustomizationOption @relation(fields: [customizationOptionId], references: [id])
}

model DeliveryPartner {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  vehicleType     String
  vehicleNumber   String?
  availability    Boolean   @default(false)
  currentLatitude  Float?
  currentLongitude Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id])
  orders          Order[]
}

model Review {
  id            Int       @id @default(autoincrement())
  userId        Int
  restaurantId  Int
  orderId       Int       @unique
  rating        Float
  comment       String?
  images        String[]  // Array of image URLs
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id])
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  order         Order     @relation(fields: [orderId], references: [id])
}